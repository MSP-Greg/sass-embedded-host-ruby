# frozen_string_literal: true

require 'rake/clean'

task default: %i[install clean]

task install: %w[sass_embedded embedded_sass_pb.rb]

CLEAN.include %w[protoc.exe *.proto *.tar.gz *.zip]

CLOBBER.include %w[sass_embedded embedded_sass_pb.rb]

file 'protoc.exe' do |t|
  fetch(ENV.fetch('PROTOC_BIN') { Configuration.default_protoc }, t.name)
  chmod 'a+x', t.name
end

file 'sass_embedded' do |t|
  archive = fetch(ENV.fetch(t.name.upcase) { Configuration.default_sass_embedded })
  unarchive archive
  rm archive
end

file 'embedded_sass.proto' => %w[sass_embedded] do |t|
  fetch(ENV.fetch('SASS_EMBEDDED_PROTOCOL') { Configuration.default_sass_embedded_protocol }, t.name)
end

rule '_pb.rb' => %w[.proto protoc.exe] do |t|
  sh './protoc.exe', '--proto_path=.', '--ruby_out=.', t.source
end

# This is a FileUtils extension that defines several additional commands to be
# added to the FileUtils utility functions.
module FileUtils
  def unarchive(archive, dest = '.')
    case archive.downcase
    when ->(name) { name.include?('.tar.') || name.end_with?('.tar') }
      mkdir_p dest
      sh 'tar', '-vxC', dest, '-f', archive
    when ->(name) { name.end_with?('.zip') }
      if Gem.win_platform?
        sh 'cscript', 'unzip.vbs', '//B', '//Nologo', archive, dest
      else
        sh 'unzip', '-od', dest, archive
      end
    else
      raise "Unknown archive format #{archive}"
    end
  end

  def fetch(uri_or_path, dest = nil)
    require 'open-uri'

    begin
      uri = URI.parse(uri_or_path)
      path = URI::DEFAULT_PARSER.unescape(uri.path)
      if uri.instance_of?(URI::File) || uri.instance_of?(URI::Generic)
        path = path.delete_prefix('/') if Gem.win_platform? && !File.file?(path)
        raise unless File.file?(path)
      end
    rescue StandardError
      raise unless File.file?(uri_or_path)

      uri = nil
      path = uri_or_path
    end

    dest = File.basename(path) if dest.nil?

    if uri.nil? || uri.instance_of?(URI::File) || uri.instance_of?(URI::Generic)
      cp path, dest
    elsif uri.respond_to?(:open)
      Rake.rake_output_message "curl -fsSLo #{dest} -- #{uri}" if Rake::FileUtilsExt.verbose_flag
      unless Rake::FileUtilsExt.nowrite_flag
        uri.open do |stream|
          File.binwrite(dest, stream.read)
        end
      end
    else
      raise
    end

    dest
  rescue StandardError
    raise IOError, "Failed to fetch #{uri_or_path}"
  end
end

# The {Configuration} module.
module Configuration
  module Platform
    OS = case RbConfig::CONFIG['host_os'].downcase
         when /darwin/
           'darwin'
         when /linux/
           'linux'
         when *Gem::WIN_PATTERNS
           'windows'
         else
           RbConfig::CONFIG['host_os'].downcase
         end

    ARCH = case RbConfig::CONFIG['host_cpu'].downcase
           when /amd64|x86_64|x64/
             'x86_64'
           when /i\d86|x86|i86pc/
             'i386'
           when /arm64|aarch64/
             'aarch64'
           when /arm/
             # Ruby before 3.0 reports "arm" instead of "arm64" as host_cpu on darwin
             OS == 'darwin' ? 'aarch64' : 'arm'
           when /ppc64le|powerpc64le/
             'powerpc64le'
           when /s390x/
             's390x'
           else
             RbConfig::CONFIG['host_cpu']
           end
  end

  private_constant :Platform

  module_function

  def default_sass_embedded
    require 'json'

    repo = 'https://github.com/sass/dart-sass-embedded'

    spec = JSON.parse(File.read(File.absolute_path('package.json', __dir__)))

    tag_name = spec['dependencies']['sass-embedded']

    message = "sass_embedded for #{Platform::OS}/#{Platform::ARCH} not available at #{repo}/releases/tag/#{tag_name}"

    os = case Platform::OS
         when 'darwin'
           'macos'
         when 'linux'
           'linux'
         when 'windows'
           'windows'
         else
           raise NotImplementedError, message
         end

    arch = case Platform::ARCH
           when 'i386'
             'ia32'
           when 'x86_64'
             'x64'
           when 'aarch64'
             Platform::OS == 'darwin' ? 'x64' : 'arm64'
           else
             raise NotImplementedError, message
           end

    ext = case os
          when 'windows'
            'zip'
          else
            'tar.gz'
          end

    "#{repo}/releases/download/#{tag_name}/sass_embedded-#{tag_name}-#{os}-#{arch}.#{ext}"
  end

  def default_protoc
    repo = 'https://repo.maven.apache.org/maven2/com/google/protobuf/protoc'

    version = Gem::Dependency.new('google-protobuf').to_spec.version

    message = "protoc for #{Platform::OS}/#{Platform::ARCH} not available at #{repo}/#{version}"

    os = case Platform::OS
         when 'darwin'
           'osx'
         when 'linux'
           'linux'
         when 'windows'
           'windows'
         else
           raise NotImplementedError, message
         end

    arch = case Platform::ARCH
           when 'i386'
             'x86_32'
           when 'x86_64'
             'x86_64'
           when 'aarch64'
             'aarch_64'
           when 'powerpc64le'
             'ppcle_64'
           when 's390x'
             's390_64'
           else
             raise NotImplementedError, message
           end

    "#{repo}/#{version}/protoc-#{version}-#{os}-#{arch}.exe"
  end

  def default_sass_embedded_protocol
    require 'json'
    require 'open3'

    stdout, stderr, status = Open3.capture3(
      File.absolute_path("sass_embedded/dart-sass-embedded#{Gem.win_platform? ? '.bat' : ''}", __dir__), '--version'
    )
    raise stderr unless status.success?

    tag_name = JSON.parse(stdout)['protocolVersion']

    "https://github.com/sass/embedded-protocol/raw/#{tag_name}/embedded_sass.proto"
  end
end
